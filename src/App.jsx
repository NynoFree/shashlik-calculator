import { useState, useMemo } from 'react';
import './App.css';

const MEAT_TYPES = {
    chicken: {
        name: '–ö—É—Ä–∏—Ü–∞',
        baseAmount: 0.35,
        alcoholEffect: 0.1,
        description: '–ù–µ–∂–Ω–æ–µ –º—è—Å–æ, 5-6 –∫—É—Å–æ—á–∫–æ–≤ –Ω–∞ —à–∞–º–ø—É—Ä (~50–≥ –∫–∞–∂–¥—ã–π). –£—Å–∞–¥–∫–∞ –ø—Ä–∏ –∂–∞—Ä–∫–µ ~10%.'
    },
    pork: {
        name: '–°–≤–∏–Ω–∏–Ω–∞',
        baseAmount: 0.4,
        alcoholEffect: 0.15,
        description: '–ú—è–≥–∫–æ–µ –º—è—Å–æ, 4-5 –∫—É—Å–∫–æ–≤ –Ω–∞ —à–∞–º–ø—É—Ä (~60–≥). –£—Å–∞–¥–∫–∞ ~15%.'
    },
    beef: {
        name: '–ì–æ–≤—è–¥–∏–Ω–∞',
        baseAmount: 0.45,
        alcoholEffect: 0.2,
        description: '–ü–ª–æ—Ç–Ω–æ–µ –º—è—Å–æ, 3-4 –∫—É—Å–∫–∞ –Ω–∞ —à–∞–º–ø—É—Ä (~70–≥). –£—Å–∞–¥–∫–∞ ~20%.'
    },
    lamb: {
        name: '–ë–∞—Ä–∞–Ω–∏–Ω–∞',
        baseAmount: 0.5,
        alcoholEffect: 0.25,
        description: '–ñ–∏—Ä–Ω–æ–µ –º—è—Å–æ, 2-3 –∫—Ä—É–ø–Ω—ã—Ö –∫—É—Å–∫–∞ –Ω–∞ —à–∞–º–ø—É—Ä (~90–≥). –£—Å–∞–¥–∫–∞ ~25%.'
    }
};

const SKEWER_WEIGHT = 0.2; // 200–≥ –Ω–∞ —à–∞–º–ø—É—Ä
const ACTIVE_EATER_BONUS = 0.3; // +30% –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –µ–¥–æ–∫–æ–≤

const InputField = ({ label, value, onChange, min, max, type = 'number', ...props }) => (
    <div className="input-block">
        <label>
            <div>{label}</div>
            <input
                type={type}
                value={value}
                onChange={onChange}
                min={min}
                max={max}
                {...props}
            />
        </label>
    </div>
);

const MeatCalculator = () => {
    const [state, setState] = useState({
        people: 5,
        activePeople: 3,
        vodka: 0,
        beer: 0,
        meatType: 'pork'
    });

    const handleChange = (field) => (e) => {
        const value = e.target.type === 'number' ? parseInt(e.target.value) || 0 : e.target.value;
        setState(prev => ({
            ...prev,
            [field]: field === 'activePeople' ? Math.min(value, state.people) : value
        }));
    };

    const { meat, skewers, meatTypeName, meatDescription } = useMemo(() => {
        const { people, activePeople, vodka, beer, meatType } = state;
        const config = MEAT_TYPES[meatType];

        const baseMeat = people * config.baseAmount;
        const activeBonus = activePeople * config.baseAmount * ACTIVE_EATER_BONUS;
        const alcoholEffect = vodka * config.alcoholEffect + beer * (config.alcoholEffect / 2);
        const totalMeat = baseMeat + activeBonus + alcoholEffect;

        return {
            meat: totalMeat.toFixed(1),
            skewers: Math.ceil(totalMeat / SKEWER_WEIGHT),
            meatTypeName: config.name,
            meatDescription: config.description
        };
    }, [state]);

    return (
        <div className="app">
            <h1>üç¢ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —à–∞—à–ª—ã–∫–∞</h1>

            <div className="input-grid">
                <InputField
                    label="üë´ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª—é–¥–µ–π"
                    value={state.people}
                    onChange={handleChange('people')}
                    min="1"
                />

                <InputField
                    label="üèÉ –ê–∫—Ç–∏–≤–Ω—ã–µ –µ–¥–æ–∫–∏"
                    value={state.activePeople}
                    onChange={handleChange('activePeople')}
                    min="0"
                    max={state.people}
                />

                <div className="input-block">
                    <label>
                        <div>üçñ –¢–∏–ø –º—è—Å–∞</div>
                        <select
                            value={state.meatType}
                            onChange={handleChange('meatType')}
                        >
                            {Object.entries(MEAT_TYPES).map(([key, { name }]) => (
                                <option key={key} value={key}>{name}</option>
                            ))}
                        </select>
                    </label>
                </div>

                <InputField
                    label="üç∂ –í–æ–¥–∫–∞ (0.5–ª)"
                    value={state.vodka}
                    onChange={handleChange('vodka')}
                    min="0"
                />

                <InputField
                    label="üç∫ –ü–∏–≤–æ (0.5–ª)"
                    value={state.beer}
                    onChange={handleChange('beer')}
                    min="0"
                />
            </div>

            <div className="result-block">
                <h2>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å—á–µ—Ç–∞</h2>

                <div className="result-item">
                    <span>–ú—è—Å–∞ ({meatTypeName}):</span>
                    <strong>{meat} –∫–≥</strong>
                </div>

                <div className="result-item tooltip-container">
                    <span>–®–∞–º–ø—É—Ä–æ–≤ (–ø–æ 200–≥):</span>
                    <strong>{skewers} —à—Ç</strong>
                    <div className="tooltip">
                        <h3>{meatTypeName}</h3>
                        <p>{meatDescription}</p>
                        <div className="stats">
                            <p><strong>–ù–∞ —á–µ–ª–æ–≤–µ–∫–∞:</strong> {MEAT_TYPES[state.meatType].baseAmount} –∫–≥</p>
                            <p><strong>–ê–ª–∫–æ–≥–æ–ª—å:</strong> +{MEAT_TYPES[state.meatType].alcoholEffect} –∫–≥/–≤–æ–¥–∫–∏</p>
                            <p><strong>–í—Å–µ–≥–æ –º—è—Å–∞:</strong> {meat} –∫–≥</p>
                        </div>
                    </div>
                </div>

                {state.vodka > 2 && (
                    <div className="warning">
                        ‚ö†Ô∏è –ü—Ä–∏ {state.vodka} –±—É—Ç—ã–ª–∫–∞—Ö –≤–æ–¥–∫–∏ —Å–¥–µ–ª–∞–π—Ç–µ –∑–∞–ø–∞—Å –º—è—Å–∞ +10-15%!
                    </div>
                )}
            </div>
        </div>
    );
};

export default MeatCalculator;