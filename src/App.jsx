import { useState, useMemo, useEffect } from 'react';
import './App.css';

const MEAT_TYPES = {
    chicken: {
        name: '–ö—É—Ä–∏—Ü–∞',
        baseAmount: 0.35,
        alcoholEffect: 0.1,
        description: '–ù–µ–∂–Ω–æ–µ –º—è—Å–æ, 5-6 –∫—É—Å–æ—á–∫–æ–≤ –Ω–∞ —à–∞–º–ø—É—Ä (~50–≥ –∫–∞–∂–¥—ã–π). –£—Å–∞–¥–∫–∞ ~10%.'
    },
    pork: {
        name: '–°–≤–∏–Ω–∏–Ω–∞',
        baseAmount: 0.4,
        alcoholEffect: 0.15,
        description: '4-5 –∫—É—Å–∫–æ–≤ –Ω–∞ —à–∞–º–ø—É—Ä (~60–≥). –£—Å–∞–¥–∫–∞ ~15%.'
    },
    beef: {
        name: '–ì–æ–≤—è–¥–∏–Ω–∞',
        baseAmount: 0.45,
        alcoholEffect: 0.2,
        description: '3-4 –∫—É—Å–∫–∞ –Ω–∞ —à–∞–º–ø—É—Ä (~70–≥). –£—Å–∞–¥–∫–∞ ~20%.'
    },
    lamb: {
        name: '–ë–∞—Ä–∞–Ω–∏–Ω–∞',
        baseAmount: 0.5,
        alcoholEffect: 0.25,
        description: '2-3 –∫—Ä—É–ø–Ω—ã—Ö –∫—É—Å–∫–∞ –Ω–∞ —à–∞–º–ø—É—Ä (~90–≥). –£—Å–∞–¥–∫–∞ ~25%.'
    }
};

const SKEWER_WEIGHT = 0.2;
const ACTIVE_EATER_FACTOR = 0.3;

function App() {
    const [state, setState] = useState({
        people: 5,
        activePeople: 3,
        vodka: 0,
        beer: 0,
        meatType: 'pork'
    });

    const [darkMode, setDarkMode] = useState(false);

    useEffect(() => {
        const mediaQuery = window.matchMedia('(prefers-color-scheme: dark)');
        const handler = (e) => setDarkMode(e.matches);

        setDarkMode(mediaQuery.matches);
        mediaQuery.addEventListener('change', handler);

        return () => mediaQuery.removeEventListener('change', handler);
    }, []);

    const { meat, skewers, meatTypeName, meatDescription } = useMemo(() => {
        const config = MEAT_TYPES[state.meatType];
        const baseMeat = state.people * config.baseAmount;
        const activeBonus = state.activePeople * config.baseAmount * ACTIVE_EATER_FACTOR;
        const alcoholEffect = state.vodka * config.alcoholEffect + state.beer * (config.alcoholEffect / 2);
        const totalMeat = baseMeat + activeBonus + alcoholEffect;

        return {
            meat: totalMeat.toFixed(1),
            skewers: Math.ceil(totalMeat / SKEWER_WEIGHT),
            meatTypeName: config.name,
            meatDescription: config.description
        };
    }, [state]);

    const handleChange = (field) => (e) => {
        const value = e.target.type === 'number'
            ? Math.max(0, parseInt(e.target.value) || 0)
            : e.target.value;

        setState(prev => ({
            ...prev,
            [field]: field === 'activePeople' ? Math.min(value, state.people) : value
        }));
    };

    return (
        <div className={`app-container ${darkMode ? 'dark-theme' : ''}`}>
            <div className="calculator">
                <h1>üç¢ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —à–∞—à–ª—ã–∫–∞</h1>

                <div className="input-grid">
                    <div className="input-block">
                        <label>
                            <span>üë´ –õ—é–¥–∏</span>
                            <input
                                type="number"
                                value={state.people}
                                onChange={handleChange('people')}
                                min="1"
                            />
                        </label>
                    </div>

                    <div className="input-block">
                        <label>
                            <span>üèÉ –ê–∫—Ç–∏–≤–Ω—ã–µ</span>
                            <input
                                type="number"
                                value={state.activePeople}
                                onChange={handleChange('activePeople')}
                                min="0"
                                max={state.people}
                            />
                        </label>
                    </div>

                    <div className="input-block">
                        <label>
                            <span>üçñ –ú—è—Å–æ</span>
                            <select
                                value={state.meatType}
                                onChange={handleChange('meatType')}
                            >
                                {Object.entries(MEAT_TYPES).map(([key, { name }]) => (
                                    <option key={key} value={key}>{name}</option>
                                ))}
                            </select>
                        </label>
                    </div>

                    <div className="input-block">
                        <label>
                            <span>üç∂ –í–æ–¥–∫–∞</span>
                            <input
                                type="number"
                                value={state.vodka}
                                onChange={handleChange('vodka')}
                                min="0"
                            />
                        </label>
                    </div>

                    <div className="input-block">
                        <label>
                            <span>üç∫ –ü–∏–≤–æ</span>
                            <input
                                type="number"
                                value={state.beer}
                                onChange={handleChange('beer')}
                                min="0"
                            />
                        </label>
                    </div>
                </div>

                <div className="result-block">
                    <h2>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã</h2>
                    <div className="result-item">
                        <span>–ú—è—Å–∞:</span>
                        <strong>{meat} –∫–≥ ({meatTypeName})</strong>
                    </div>
                    <div className="result-item">
                        <span>–®–∞–º–ø—É—Ä–æ–≤:</span>
                        <strong>{skewers} —à—Ç (–ø–æ 200–≥)</strong>
                    </div>
                </div>
            </div>
        </div>
    );
}

export default App;